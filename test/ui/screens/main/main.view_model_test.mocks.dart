// Mocks generated by Mockito 5.4.5 from annotations
// in enpal_tech_chall/test/ui/screens/main/main.view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/widgets.dart' as _i3;
import 'package:go_router/src/route.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeShellRouteContext_0 extends _i1.SmartFake
    implements _i2.ShellRouteContext {
  _FakeShellRouteContext_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulShellRoute_2 extends _i1.SmartFake
    implements _i2.StatefulShellRoute {
  _FakeStatefulShellRoute_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeState_3<T extends _i3.StatefulWidget> extends _i1.SmartFake
    implements _i3.State<T> {
  _FakeState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_4 extends _i1.SmartFake
    implements _i3.StatefulElement {
  _FakeStatefulElement_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_5 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) => super.toString();
}

/// A class which mocks [StatefulNavigationShell].
///
/// See the documentation for Mockito's code generation for more information.
class MockStatefulNavigationShell extends _i1.Mock
    implements _i2.StatefulNavigationShell {
  @override
  _i2.ShellRouteContext get shellRouteContext =>
      (super.noSuchMethod(
            Invocation.getter(#shellRouteContext),
            returnValue: _FakeShellRouteContext_0(
              this,
              Invocation.getter(#shellRouteContext),
            ),
            returnValueForMissingStub: _FakeShellRouteContext_0(
              this,
              Invocation.getter(#shellRouteContext),
            ),
          )
          as _i2.ShellRouteContext);

  @override
  _i2.ShellNavigationContainerBuilder get containerBuilder =>
      (super.noSuchMethod(
            Invocation.getter(#containerBuilder),
            returnValue:
                (
                  _i3.BuildContext context,
                  _i2.StatefulNavigationShell navigationShell,
                  List<_i3.Widget> children,
                ) => _FakeWidget_1(this, Invocation.getter(#containerBuilder)),
            returnValueForMissingStub:
                (
                  _i3.BuildContext context,
                  _i2.StatefulNavigationShell navigationShell,
                  List<_i3.Widget> children,
                ) => _FakeWidget_1(this, Invocation.getter(#containerBuilder)),
          )
          as _i2.ShellNavigationContainerBuilder);

  @override
  int get currentIndex =>
      (super.noSuchMethod(
            Invocation.getter(#currentIndex),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  _i2.StatefulShellRoute get route =>
      (super.noSuchMethod(
            Invocation.getter(#route),
            returnValue: _FakeStatefulShellRoute_2(
              this,
              Invocation.getter(#route),
            ),
            returnValueForMissingStub: _FakeStatefulShellRoute_2(
              this,
              Invocation.getter(#route),
            ),
          )
          as _i2.StatefulShellRoute);

  @override
  List<_i2.StatefulShellBranch> get debugLoadedBranches =>
      (super.noSuchMethod(
            Invocation.getter(#debugLoadedBranches),
            returnValue: <_i2.StatefulShellBranch>[],
            returnValueForMissingStub: <_i2.StatefulShellBranch>[],
          )
          as List<_i2.StatefulShellBranch>);

  @override
  void goBranch(int? index, {bool? initialLocation = false}) =>
      super.noSuchMethod(
        Invocation.method(
          #goBranch,
          [index],
          {#initialLocation: initialLocation},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.State<_i3.StatefulWidget> createState() =>
      (super.noSuchMethod(
            Invocation.method(#createState, []),
            returnValue: _FakeState_3<_i3.StatefulWidget>(
              this,
              Invocation.method(#createState, []),
            ),
            returnValueForMissingStub: _FakeState_3<_i3.StatefulWidget>(
              this,
              Invocation.method(#createState, []),
            ),
          )
          as _i3.State<_i3.StatefulWidget>);

  @override
  _i3.StatefulElement createElement() =>
      (super.noSuchMethod(
            Invocation.method(#createElement, []),
            returnValue: _FakeStatefulElement_4(
              this,
              Invocation.method(#createElement, []),
            ),
            returnValueForMissingStub: _FakeStatefulElement_4(
              this,
              Invocation.method(#createElement, []),
            ),
          )
          as _i3.StatefulElement);

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = ', ',
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringShallow, [], {
              #joiner: joiner,
              #minLevel: minLevel,
            }),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#toStringShallow, [], {
                #joiner: joiner,
                #minLevel: minLevel,
              }),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.method(#toStringShallow, [], {
                #joiner: joiner,
                #minLevel: minLevel,
              }),
            ),
          )
          as String);

  @override
  String toStringDeep({
    String? prefixLineOne = '',
    String? prefixOtherLines,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.debug,
    int? wrapWidth = 65,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringDeep, [], {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
              #wrapWidth: wrapWidth,
            }),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#toStringDeep, [], {
                #prefixLineOne: prefixLineOne,
                #prefixOtherLines: prefixOtherLines,
                #minLevel: minLevel,
                #wrapWidth: wrapWidth,
              }),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.method(#toStringDeep, [], {
                #prefixLineOne: prefixLineOne,
                #prefixOtherLines: prefixOtherLines,
                #minLevel: minLevel,
                #wrapWidth: wrapWidth,
              }),
            ),
          )
          as String);

  @override
  _i4.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i4.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_5(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
            returnValueForMissingStub: _FakeDiagnosticsNode_5(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(
            Invocation.method(#debugDescribeChildren, []),
            returnValue: <_i4.DiagnosticsNode>[],
            returnValueForMissingStub: <_i4.DiagnosticsNode>[],
          )
          as List<_i4.DiagnosticsNode>);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}
